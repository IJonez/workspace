
Messer_selbst.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  00800060  000001b8  2**0
                  ALLOC
  2 .stab         000003b4  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006ca  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
uint8_t  ms_sclk_last;
uint8_t i;


int main(void)
	{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0Xff; 		// sets Port B as input (ff = 11111111)
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	80 83       	st	Z, r24
	PORTB = 0x03; 		//  sets pin 0 and 1 as "1" (03 = 11)
  8e:	e8 e3       	ldi	r30, 0x38	; 56
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	80 83       	st	Z, r24
	DDRD = 0xff;
  96:	e1 e3       	ldi	r30, 0x31	; 49
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24

	while(1)
		{
		ms_sclk = PIND & (1<<PD7);  // Signal sclk einlesen
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 78       	andi	r24, 0x80	; 128
  a6:	80 93 60 00 	sts	0x0060, r24

		if (    ms_sclk    != 0 && ms_sclk_last == 0    )  // pos Flanke
  aa:	80 91 60 00 	lds	r24, 0x0060
  ae:	88 23       	and	r24, r24
  b0:	51 f1       	breq	.+84     	; 0x106 <main+0x8a>
  b2:	80 91 66 00 	lds	r24, 0x0066
  b6:	88 23       	and	r24, r24
  b8:	31 f5       	brne	.+76     	; 0x106 <main+0x8a>
		{
			ms_data += (PIND & (1<<PD6));
  ba:	e0 e3       	ldi	r30, 0x30	; 48
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 2f       	mov	r24, r24
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	9c 01       	movw	r18, r24
  ca:	ad 01       	movw	r20, r26
  cc:	20 74       	andi	r18, 0x40	; 64
  ce:	30 70       	andi	r19, 0x00	; 0
  d0:	40 70       	andi	r20, 0x00	; 0
  d2:	50 70       	andi	r21, 0x00	; 0
  d4:	80 91 61 00 	lds	r24, 0x0061
  d8:	90 91 62 00 	lds	r25, 0x0062
  dc:	a0 91 63 00 	lds	r26, 0x0063
  e0:	b0 91 64 00 	lds	r27, 0x0064
  e4:	82 0f       	add	r24, r18
  e6:	93 1f       	adc	r25, r19
  e8:	a4 1f       	adc	r26, r20
  ea:	b5 1f       	adc	r27, r21
  ec:	80 93 61 00 	sts	0x0061, r24
  f0:	90 93 62 00 	sts	0x0062, r25
  f4:	a0 93 63 00 	sts	0x0063, r26
  f8:	b0 93 64 00 	sts	0x0064, r27
			i += 1;
  fc:	80 91 65 00 	lds	r24, 0x0065
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 65 00 	sts	0x0065, r24
		}
		if (    ms_sclk     == 0 && ms_sclk_last != 0    )  // neg Flanke
 106:	80 91 60 00 	lds	r24, 0x0060
		{
		  // nothing happens here, nothing i tell you!
		}
		ms_sclk_last = ms_sclk;
 10a:	80 91 60 00 	lds	r24, 0x0060
 10e:	80 93 66 00 	sts	0x0066, r24
		if (i == 24)
 112:	80 91 65 00 	lds	r24, 0x0065
 116:	88 31       	cpi	r24, 0x18	; 24
 118:	11 f6       	brne	.-124    	; 0x9e <main+0x22>
		{
			ms_data_out = ms_data;
 11a:	80 91 61 00 	lds	r24, 0x0061
 11e:	90 91 62 00 	lds	r25, 0x0062
 122:	a0 91 63 00 	lds	r26, 0x0063
 126:	b0 91 64 00 	lds	r27, 0x0064
 12a:	80 93 67 00 	sts	0x0067, r24
 12e:	90 93 68 00 	sts	0x0068, r25
 132:	a0 93 69 00 	sts	0x0069, r26
 136:	b0 93 6a 00 	sts	0x006A, r27
			i = 0;
 13a:	10 92 65 00 	sts	0x0065, r1
 13e:	af cf       	rjmp	.-162    	; 0x9e <main+0x22>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
